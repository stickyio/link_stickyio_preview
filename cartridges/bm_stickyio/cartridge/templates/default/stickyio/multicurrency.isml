<isdecorate template="application/MenuFrame">
    <iscontent type="text/html" charset="UTF-8"/>
    <isinclude template="inc/Modules"/>
    <isset name="TOP_URL" value="${URLUtils.url('SiteNavigationBar-ShowMenuitemOverview', 'CurrentMenuItemId', pdict.CurrentHttpParameterMap.CurrentMenuItemId)}" scope="page"/>
    <isbreadcrumb name1="sticky.io" url1="${TOP_URL.toString()}" name2="${dw.web.Resource.msg('manage.' + pdict.type, 'stickyio', null)}"/>
    <link href="${URLUtils.staticURL('css/administration.css')}" rel="stylesheet" type="text/css" />
    <link href="${URLUtils.staticURL('css/multicurrency.css')}" rel="stylesheet" type="text/css" />
    <hr/>

    <div class="main-content">
        <div class="header-title">
            <h1>Multi-Currency</h1>
        </div>
        <div>
            <label class="mc-enabled-label">
                Enabled
                <select class="mc-enabled" id="mc-enabled" onchange="mcSwitchStateChanged(event)">
                    <option value="false">No</option>
                    <option value="true">Yes</option>
                </select>
            </label>
        </div>
        <div id="mc-enabled-section">
            <h2 class="section-subtitle">
                Defined Gateways
                <span class="mc-unsaved-changes" id="mc-unsaved-changes" style="display: none">You have unsaved changes</span>
            </h2>
            <div style="margin-bottom: 3px">
                <button class="mc-add-button" id="mc-add-button" onclick="addInputsRow(null, true)">ADD</button>
                <button class="mc-save-button" id="mc-save-button" onclick="saveData()">SAVE</button>
            </div>
            <table style="width: 100%;">
                <thead>
                <tr class="table-headings">
                    <th style="width: 30%; padding: 3px 0">Locale</th>
                    <th style="width: 30%; padding: 3px 0">Currency</th>
                    <th style="width: 30%; padding: 3px 0">Gateway ID</th>
                    <th style="width: 10%; padding: 3px 0">Action</th>
                </tr>
                </thead>
                <tbody id="table-body">
                </tbody>
            </table>
        </div>
        <div id="mc-disabled-section">
            <h2 class="section-subtitle">
                Default Gateway
            </h2>
            <label>
                Gateway ID
                <input id="default-gw-input" type="number" value="${pdict.stickyioGatewayID}">
                <button class="default-gw-save" onclick="saveDefaultGatewayId()">SAVE</button>
            </label>
        </div>
    </div>

    <div id="mc-modal" class="modal">
        <div class="modal-content">
            <span class="close" id="mc-close-modal" onclick="setModalState(false)">&times;</span>
            <p>Disabling Multi-Currency will erase your current configuration</p>
            <button class="mc-modal-accept-button" id="mc-modal-accept-button" onclick="deleteData()">Accept</button>
            <button class="mc-modal-cancel-button" id="mc-modal-cancel-button" onclick="setModalState(false)">Cancel</button>
        </div>
    </div>

    <div id="snackbar">Saved</div>
</isdecorate>

<script>
    loadData();
    setAddButtonState();
    setSaveButtonState();
    showGatewaysSection();

    function sendData(preferences) {
        let url = "${URLUtils.url('Stickyio_bm-MultiCurrency-UpdatePreference')}" + '?stickyioMultiCurrencyOptions=' + JSON.stringify(preferences);
        const xhttp = new XMLHttpRequest();
        xhttp.onload = function () {
            // let jsonResponse = JSON.parse(xhttp.responseText);
        }
        xhttp.open('POST', url, true)
        xhttp.send();
    }

    function addInputsRow(data = null, isAddingNewRow) {
        let nextRowId = (getInputsRows().length + 1).toString();
        let tableBody = document.getElementById("table-body");
        let newRow = document.createElement("tr");
        newRow.className = "mc-option";
        newRow.id = "mc-option-" + nextRowId;
        let newLocaleSelectElement = document.createElement("select");
        newLocaleSelectElement.className = "mc-locale-select";
        newLocaleSelectElement.id = "mc-locale-select-" + nextRowId;
        newLocaleSelectElement.addEventListener("change", unsavedChangesMessage);
        let newLocaleTD = document.createElement("td");
        newLocaleTD.appendChild(newLocaleSelectElement);
        let newCurrencySelectElement = document.createElement("select");
        newCurrencySelectElement.className = "mc-currency-select";
        newCurrencySelectElement.id = "mc-locale-currency-" + nextRowId;
        newCurrencySelectElement.addEventListener("change", unsavedChangesMessage);
        let newCurrencyTD = document.createElement("td");
        newCurrencyTD.appendChild(newCurrencySelectElement);
        let newGatewayIdInputElement = document.createElement("input");
        newGatewayIdInputElement.className = "mc-gatewayid-input";
        newGatewayIdInputElement.id = "mc-locale-gatewayid-" + nextRowId;
        newGatewayIdInputElement.addEventListener("keydown", unsavedChangesMessage);
        let newGatewayIdTD = document.createElement("td");
        newGatewayIdTD.appendChild(newGatewayIdInputElement);
        let newDeleteRowButtonElement = document.createElement("button");
        newDeleteRowButtonElement.className = "mc-delete-row-button";
        newDeleteRowButtonElement.id = "mc-delete-row-button" + nextRowId;
        newDeleteRowButtonElement.textContent = 'Delete';
        newDeleteRowButtonElement.addEventListener("click", deleteInputRow);
        let newDeleteTD = document.createElement("td");
        newDeleteTD.style.textAlign = "center";
        newDeleteTD.appendChild(newDeleteRowButtonElement);

        getAllowedLocales().forEach(locale => {
            let newOptionElement = document.createElement("option");
            newOptionElement.text = locale;
            newOptionElement.value = locale;
            if (data?.locale === locale) {
                newOptionElement.selected = true;
            }
            newLocaleSelectElement.appendChild(newOptionElement);
        })

        getAllowedCurrencies().forEach(currency => {
            let newOptionElement = document.createElement("option");
            newOptionElement.text = currency;
            newOptionElement.value = currency;
            if (data?.currency === currency) {
                newOptionElement.selected = true;
            }
            newCurrencySelectElement.appendChild(newOptionElement);
        })

        newGatewayIdInputElement.type = "number";
        newGatewayIdInputElement.placeholder = "Gateway ID";
        if (data?.gatewayId) {
            newGatewayIdInputElement.value = data.gatewayId;
        }

        newRow.appendChild(newLocaleTD);
        newRow.appendChild(newCurrencyTD);
        newRow.appendChild(newGatewayIdTD);
        newRow.appendChild(newDeleteTD);
        tableBody.appendChild(newRow);
        if (isAddingNewRow) { unsavedChangesMessage(true); }
    }

    function getAllowedLocales() {
        return "${pdict.locales}".slice(1,-1).split(", ");
    }

    function getAllowedCurrencies() {
        return "${pdict.currencies}".slice(1,-1).split(", ");
    }

    function constructDataObject() {
        let tableRows = Array.from(document.getElementById('table-body').children);
        let preferences = [];
        tableRows.forEach(element => {
            if (element.className !== 'mc-option') { return; }
            let rowElements = Array.from(element.children);
            let preference = {};
            rowElements.forEach(rowElement => {
                let input = Array.from(rowElement.children)[0];
                switch (input.className) {
                    case "mc-locale-select": preference.locale = input.value; break;
                    case "mc-currency-select": preference.currency = input.value; break;
                    case "mc-gatewayid-input": preference.gatewayId = input.value; break;
                }
            })
            preferences.push(preference);
        })
        return preferences;
    }

    function loadData() {
        let data = JSON.parse("${pdict.stickyioMultiCurrencyOptions}".replace(/&quot;/g,'"'));
        if (Object.keys(data).length === 0) { return; }
        document.getElementById("mc-enabled").value = "true";
        data.forEach(element => {
            addInputsRow(element);
        })
    }

    function saveData() {
        sendData(constructDataObject());
        unsavedChangesMessage(false);
        toast();
    }

    function mcSwitchStateChanged(event) {
        let mcEnabled = isMCEnabled();
        if (mcEnabled === true) {
            showGatewaysSection();
            addInputsRow();
            setAddButtonState();
            return;
        }
        event.preventDefault();
        setModalState(true);
    }

    function getInputsRows() {
        let preferencesElement = document.getElementById("table-body");
        return Array.from(preferencesElement.children);
    }

    function getInputRow(id) {
        let inputRows = getInputsRows();
        for (let inputRow of inputRows) {
            if (inputRow.id === "mc-option-"+id) {
                return inputRow;
            }
        }
    }

    function deleteInputRow(event) {
        event.target.parentElement.parentElement.remove();
        unsavedChangesMessage(true);
    }

    function unsavedChangesMessage(show) {
        let unsavedChangesElement = document.getElementById("mc-unsaved-changes");
        if (typeof show !== 'boolean') { show = true; }
        unsavedChangesElement.style.display = show ? "inline" : "none";
        setSaveButtonState();
    }

    function setModalState(state) {
        if (state !== false) {
            document.getElementById("mc-enabled").value = "true";
        }
        document.getElementById("mc-modal").style.display= state === true ? "block" : "none";
    }

    function deleteData() {
        getInputsRows().forEach(inputRow => {
            inputRow.remove();
        })
        sendData({});
        document.getElementById("mc-enabled").value = "false";
        setModalState(false);
        setAddButtonState();
        unsavedChangesMessage(false);
        showGatewaysSection();
    }

    function isMCEnabled() {
        return document.getElementById("mc-enabled").value === "true";
    }

    function setAddButtonState() {
        let addButtonElement = document.getElementById("mc-add-button");
        addButtonElement.disabled = !isMCEnabled();
    }

    function setSaveButtonState() {
        let saveButtonElement = document.getElementById("mc-save-button");
        let unsavedChangesElement = document.getElementById("mc-unsaved-changes");
        if(unsavedChangesElement.style.display === "inline") {
            saveButtonElement.disabled = false;
            return;
        }
        saveButtonElement.disabled = true;
    }

    function toast() {
        var x = document.getElementById("snackbar");
        x.className = "show";
        setTimeout(function(){ x.className = x.className.replace("show", ""); }, 3000);
    }

    function saveDefaultGatewayId() {
        let gatewayId = document.getElementById("default-gw-input").value;
        let url = "${URLUtils.url('Stickyio_bm-UpdatePreference-GatewayId')}" + '?stickyioGatewayID=' + gatewayId;
        const xhttp = new XMLHttpRequest();
        xhttp.onload = function () {
            toast();
        }
        xhttp.open('POST', url, true)
        xhttp.send();
    }

    function showGatewaysSection() {
        let mcSection = document.getElementById("mc-enabled-section");
        let defaultGwSection = document.getElementById("mc-disabled-section");
        if (isMCEnabled()) {
            mcSection.style.display = "block";
            defaultGwSection.style.display = "none";
        }
        else {
            mcSection.style.display = "none";
            defaultGwSection.style.display = "block";
        }
    }
</script>
